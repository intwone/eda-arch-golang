// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/events/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	events "github.com/intwone/eda-arch-golang/pkg/events"
)

// MockEventInterface is a mock of EventInterface interface.
type MockEventInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventInterfaceMockRecorder
}

// MockEventInterfaceMockRecorder is the mock recorder for MockEventInterface.
type MockEventInterfaceMockRecorder struct {
	mock *MockEventInterface
}

// NewMockEventInterface creates a new mock instance.
func NewMockEventInterface(ctrl *gomock.Controller) *MockEventInterface {
	mock := &MockEventInterface{ctrl: ctrl}
	mock.recorder = &MockEventInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventInterface) EXPECT() *MockEventInterfaceMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockEventInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockEventInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockEventInterface)(nil).GetName))
}

// GetPayload mocks base method.
func (m *MockEventInterface) GetPayload() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayload")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetPayload indicates an expected call of GetPayload.
func (mr *MockEventInterfaceMockRecorder) GetPayload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayload", reflect.TypeOf((*MockEventInterface)(nil).GetPayload))
}

// GetTimestamp mocks base method.
func (m *MockEventInterface) GetTimestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockEventInterfaceMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockEventInterface)(nil).GetTimestamp))
}

// SetPayload mocks base method.
func (m *MockEventInterface) SetPayload(payload interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPayload", payload)
}

// SetPayload indicates an expected call of SetPayload.
func (mr *MockEventInterfaceMockRecorder) SetPayload(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayload", reflect.TypeOf((*MockEventInterface)(nil).SetPayload), payload)
}

// MockEventHandlerInterface is a mock of EventHandlerInterface interface.
type MockEventHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerInterfaceMockRecorder
}

// MockEventHandlerInterfaceMockRecorder is the mock recorder for MockEventHandlerInterface.
type MockEventHandlerInterfaceMockRecorder struct {
	mock *MockEventHandlerInterface
}

// NewMockEventHandlerInterface creates a new mock instance.
func NewMockEventHandlerInterface(ctrl *gomock.Controller) *MockEventHandlerInterface {
	mock := &MockEventHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockEventHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandlerInterface) EXPECT() *MockEventHandlerInterfaceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockEventHandlerInterface) Handle(event events.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", event)
}

// Handle indicates an expected call of Handle.
func (mr *MockEventHandlerInterfaceMockRecorder) Handle(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEventHandlerInterface)(nil).Handle), event)
}

// MockEventDispatcherInterface is a mock of EventDispatcherInterface interface.
type MockEventDispatcherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventDispatcherInterfaceMockRecorder
}

// MockEventDispatcherInterfaceMockRecorder is the mock recorder for MockEventDispatcherInterface.
type MockEventDispatcherInterfaceMockRecorder struct {
	mock *MockEventDispatcherInterface
}

// NewMockEventDispatcherInterface creates a new mock instance.
func NewMockEventDispatcherInterface(ctrl *gomock.Controller) *MockEventDispatcherInterface {
	mock := &MockEventDispatcherInterface{ctrl: ctrl}
	mock.recorder = &MockEventDispatcherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDispatcherInterface) EXPECT() *MockEventDispatcherInterfaceMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockEventDispatcherInterface) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockEventDispatcherInterfaceMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockEventDispatcherInterface)(nil).Clear))
}

// Dispatch mocks base method.
func (m *MockEventDispatcherInterface) Dispatch(event events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockEventDispatcherInterfaceMockRecorder) Dispatch(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockEventDispatcherInterface)(nil).Dispatch), event)
}

// Has mocks base method.
func (m *MockEventDispatcherInterface) Has(eventName string, handler events.EventHandlerInterface) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", eventName, handler)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockEventDispatcherInterfaceMockRecorder) Has(eventName, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockEventDispatcherInterface)(nil).Has), eventName, handler)
}

// Register mocks base method.
func (m *MockEventDispatcherInterface) Register(eventName string, handler events.EventHandlerInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", eventName, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockEventDispatcherInterfaceMockRecorder) Register(eventName, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockEventDispatcherInterface)(nil).Register), eventName, handler)
}

// Remove mocks base method.
func (m *MockEventDispatcherInterface) Remove(eventName string, handler events.EventHandlerInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", eventName, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockEventDispatcherInterfaceMockRecorder) Remove(eventName, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockEventDispatcherInterface)(nil).Remove), eventName, handler)
}
